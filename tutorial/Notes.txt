
STATIC //////////////////////////////////////////////////////////////////////////////
static = a method or property that belongs to a class but not a single object
could be use to count the number of objects that have been created
accessed using Class.property/Class.Method()
constants like Math.PI
//////////////////////////////////////////////////////////////////////////////


INHERITANCE //////////////////////////////////////////////////////////////////////////////
inheritance = it's inheritance

syntax:
class Parent{}

class Mom extends Parent{}
class Dad extends Parent{}
//////////////////////////////////////////////////////////////////////////////


OVERRIDING //////////////////////////////////////////////////////////////////////////////
overriding = it's overriding

syntax:
class Parent{
    FeedKid(){}
}

class Mom extends Parent{}
class Dad extends Parent{
    FeedKid(){}  //Overriding just uses the same name as method in parent function
}
//////////////////////////////////////////////////////////////////////////////


SUPER //////////////////////////////////////////////////////////////////////////////
super = Reference to parent class

syntax:
class Parent{

    constructor(age){
        this.age = age;
    }

    FeedKid(){}

}

class Mom extends Parent{}
class Dad extends Parent{

    constructor(age, favoriteChild){
        super(age);
        this.favoriteChild = favoriteChild;
    }

    FeedKids(){
        super.FeedKid();
        favoriteChild.Feed();
        favoriteChild.Feed();
        favoriteChild.Feed();
    }
}
//////////////////////////////////////////////////////////////////////////////


ARRAY IF FUNCTIONS //////////////////////////////////////////////////////////////////////////////
You can have an array of function in javascript, because functions can be stored like variables

let functions = [ function, function2, function3]

functions.ForEach(func => func());
//////////////////////////////////////////////////////////////////////////////


GETTERS & SETTERS //////////////////////////////////////////////////////////////////////////////

class Parent{

    constructor(age){
        this.age = age;
        this.name = "";
    }

    set SetName(newName){
        this.name = newName.toUpperCase();
    }
    get GetName(){
        return this.name;
    }    
}


TEMPLATE LITERALS //////////////////////////////////////////////////////////////////////////////
const.log(`Hello ${firstName} 
${secondName}`);
//////////////////////////////////////////////////////////////////////////////


ADDING HTML ELEMENTS //////////////////////////////////////////////////////////////////////////////
h1 = document.createElement("h1");
underline = document.createElement("u");

underline.innerText = "Hello World";
h1.append(underline);
document.body.append(h1);
//////////////////////////////////////////////////////////////////////////////


EDITING HTML ELEMENTS //////////////////////////////////////////////////////////////////////////////
document.querySelector("#myButton").onclick = function(){

    h1 = document.querySelector("#myH1");
    h1.style.color = "black";

    h1.innerText = "Bye World";

    p = document.querySelectorAll(".myP"); //Acts as an array

    p[0].innerText = "New Text";


}
//////////////////////////////////////////////////////////////////////////////


CHANGE CSS //////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////